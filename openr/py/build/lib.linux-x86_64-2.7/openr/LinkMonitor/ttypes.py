#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import six
from thrift.util.Recursive import fix_spec
from thrift.Thrift import *
from thrift.protocol.TProtocol import TProtocolException


import openr.Lsdb.ttypes


import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
try:
  from thrift.protocol import fastproto
except:
  fastproto = None
all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

__all__ = ['UTF8STRINGS', 'LinkMonitorCommand', 'LinkMonitorRequest', 'InterfaceDetails', 'DumpLinksReply', 'LinkMonitorConfig']

class LinkMonitorCommand:
  SET_OVERLOAD = 1
  UNSET_OVERLOAD = 2
  DUMP_LINKS = 3
  SET_LINK_OVERLOAD = 4
  UNSET_LINK_OVERLOAD = 5
  SET_LINK_METRIC = 6
  UNSET_LINK_METRIC = 7

  _VALUES_TO_NAMES = {
    1: "SET_OVERLOAD",
    2: "UNSET_OVERLOAD",
    3: "DUMP_LINKS",
    4: "SET_LINK_OVERLOAD",
    5: "UNSET_LINK_OVERLOAD",
    6: "SET_LINK_METRIC",
    7: "UNSET_LINK_METRIC",
  }

  _NAMES_TO_VALUES = {
    "SET_OVERLOAD": 1,
    "UNSET_OVERLOAD": 2,
    "DUMP_LINKS": 3,
    "SET_LINK_OVERLOAD": 4,
    "UNSET_LINK_OVERLOAD": 5,
    "SET_LINK_METRIC": 6,
    "UNSET_LINK_METRIC": 7,
  }

class LinkMonitorRequest:
  """
  Attributes:
   - cmd
   - interfaceName
   - interfaceMetric
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      self.checkRequired()
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      self.checkRequired()
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cmd = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.interfaceName = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.interfaceMetric = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()
    self.checkRequired()

  def checkRequired(self):
    return

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LinkMonitorRequest')
    if self.cmd != None:
      oprot.writeFieldBegin('cmd', TType.I32, 1)
      oprot.writeI32(self.cmd)
      oprot.writeFieldEnd()
    if self.interfaceName != None:
      oprot.writeFieldBegin('interfaceName', TType.STRING, 2)
      oprot.writeString(self.interfaceName.encode('utf-8')) if UTF8STRINGS and not isinstance(self.interfaceName, bytes) else oprot.writeString(self.interfaceName)
      oprot.writeFieldEnd()
    if self.interfaceMetric != None:
      oprot.writeFieldBegin('interfaceMetric', TType.I32, 3)
      oprot.writeI32(self.interfaceMetric)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    value = pprint.pformat(self.cmd, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    cmd=%s' % (value))
    value = pprint.pformat(self.interfaceName, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    interfaceName=%s' % (value))
    value = pprint.pformat(self.interfaceMetric, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    interfaceMetric=%s' % (value))
    return "%s(\n%s)" % (self.__class__.__name__, ",\n".join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  # Override the __hash__ function for Python3 - t10434117
  if not six.PY2:
    __hash__ = object.__hash__

class InterfaceDetails:
  """
  Attributes:
   - info
   - isOverloaded
   - metricOverride
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      self.checkRequired()
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      self.checkRequired()
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.info = openr.Lsdb.ttypes.InterfaceInfo()
          self.info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.isOverloaded = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.metricOverride = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()
    self.checkRequired()

  def checkRequired(self):
    return

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('InterfaceDetails')
    if self.info != None:
      oprot.writeFieldBegin('info', TType.STRUCT, 1)
      self.info.write(oprot)
      oprot.writeFieldEnd()
    if self.isOverloaded != None:
      oprot.writeFieldBegin('isOverloaded', TType.BOOL, 2)
      oprot.writeBool(self.isOverloaded)
      oprot.writeFieldEnd()
    if self.metricOverride != None:
      oprot.writeFieldBegin('metricOverride', TType.I32, 3)
      oprot.writeI32(self.metricOverride)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    value = pprint.pformat(self.info, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    info=%s' % (value))
    value = pprint.pformat(self.isOverloaded, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    isOverloaded=%s' % (value))
    value = pprint.pformat(self.metricOverride, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    metricOverride=%s' % (value))
    return "%s(\n%s)" % (self.__class__.__name__, ",\n".join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  # Override the __hash__ function for Python3 - t10434117
  if not six.PY2:
    __hash__ = object.__hash__

class DumpLinksReply:
  """
  Attributes:
   - thisNodeName
   - isOverloaded
   - interfaceDetails
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      self.checkRequired()
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      self.checkRequired()
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.thisNodeName = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.isOverloaded = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.interfaceDetails = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          if _size0 >= 0:
            for _i4 in six.moves.range(_size0):
              _key5 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val6 = InterfaceDetails()
              _val6.read(iprot)
              self.interfaceDetails[_key5] = _val6
          else: 
            while iprot.peekMap():
              _key7 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val8 = InterfaceDetails()
              _val8.read(iprot)
              self.interfaceDetails[_key7] = _val8
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()
    self.checkRequired()

  def checkRequired(self):
    return

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('DumpLinksReply')
    if self.thisNodeName != None:
      oprot.writeFieldBegin('thisNodeName', TType.STRING, 1)
      oprot.writeString(self.thisNodeName.encode('utf-8')) if UTF8STRINGS and not isinstance(self.thisNodeName, bytes) else oprot.writeString(self.thisNodeName)
      oprot.writeFieldEnd()
    if self.isOverloaded != None:
      oprot.writeFieldBegin('isOverloaded', TType.BOOL, 3)
      oprot.writeBool(self.isOverloaded)
      oprot.writeFieldEnd()
    if self.interfaceDetails != None:
      oprot.writeFieldBegin('interfaceDetails', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.interfaceDetails))
      for kiter9,viter10 in self.interfaceDetails.items():
        oprot.writeString(kiter9.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter9, bytes) else oprot.writeString(kiter9)
        viter10.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    value = pprint.pformat(self.thisNodeName, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    thisNodeName=%s' % (value))
    value = pprint.pformat(self.isOverloaded, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    isOverloaded=%s' % (value))
    value = pprint.pformat(self.interfaceDetails, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    interfaceDetails=%s' % (value))
    return "%s(\n%s)" % (self.__class__.__name__, ",\n".join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  # Override the __hash__ function for Python3 - t10434117
  if not six.PY2:
    __hash__ = object.__hash__

class LinkMonitorConfig:
  """
  Attributes:
   - isOverloaded
   - overloadedLinks
   - linkMetricOverrides
   - nodeLabel
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      self.checkRequired()
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      self.checkRequired()
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.isOverloaded = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.overloadedLinks = set()
          (_etype14, _size11) = iprot.readSetBegin()
          if _size11 >= 0:
            for _i15 in six.moves.range(_size11):
              _elem16 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.overloadedLinks.add(_elem16)
          else: 
            while iprot.peekSet():
              _elem17 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.overloadedLinks.add(_elem17)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.linkMetricOverrides = {}
          (_ktype19, _vtype20, _size18 ) = iprot.readMapBegin() 
          if _size18 >= 0:
            for _i22 in six.moves.range(_size18):
              _key23 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val24 = iprot.readI32()
              self.linkMetricOverrides[_key23] = _val24
          else: 
            while iprot.peekMap():
              _key25 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val26 = iprot.readI32()
              self.linkMetricOverrides[_key25] = _val26
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nodeLabel = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()
    self.checkRequired()

  def checkRequired(self):
    return

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LinkMonitorConfig')
    if self.isOverloaded != None:
      oprot.writeFieldBegin('isOverloaded', TType.BOOL, 1)
      oprot.writeBool(self.isOverloaded)
      oprot.writeFieldEnd()
    if self.overloadedLinks != None:
      oprot.writeFieldBegin('overloadedLinks', TType.SET, 2)
      oprot.writeSetBegin(TType.STRING, len(self.overloadedLinks))
      for iter27 in self.overloadedLinks:
        oprot.writeString(iter27.encode('utf-8')) if UTF8STRINGS and not isinstance(iter27, bytes) else oprot.writeString(iter27)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.linkMetricOverrides != None:
      oprot.writeFieldBegin('linkMetricOverrides', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.linkMetricOverrides))
      for kiter28,viter29 in self.linkMetricOverrides.items():
        oprot.writeString(kiter28.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter28, bytes) else oprot.writeString(kiter28)
        oprot.writeI32(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nodeLabel != None:
      oprot.writeFieldBegin('nodeLabel', TType.I32, 4)
      oprot.writeI32(self.nodeLabel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    value = pprint.pformat(self.isOverloaded, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    isOverloaded=%s' % (value))
    value = pprint.pformat(self.overloadedLinks, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    overloadedLinks=%s' % (value))
    value = pprint.pformat(self.linkMetricOverrides, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    linkMetricOverrides=%s' % (value))
    value = pprint.pformat(self.nodeLabel, indent=0)
    value = padding.join(value.splitlines(True))
    L.append('    nodeLabel=%s' % (value))
    return "%s(\n%s)" % (self.__class__.__name__, ",\n".join(L))

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  # Override the __hash__ function for Python3 - t10434117
  if not six.PY2:
    __hash__ = object.__hash__

all_structs.append(LinkMonitorRequest)
LinkMonitorRequest.thrift_spec = (
  None, # 0
  (1, TType.I32, 'cmd', LinkMonitorCommand, None, 2, ), # 1
  (2, TType.STRING, 'interfaceName', True, None, 2, ), # 2
  (3, TType.I32, 'interfaceMetric', None, 1, 2, ), # 3
)

LinkMonitorRequest.thrift_struct_annotations = {
}
LinkMonitorRequest.thrift_field_annotations = {
}

def LinkMonitorRequest__init__(self, cmd=None, interfaceName=None, interfaceMetric=LinkMonitorRequest.thrift_spec[3][4],):
  self.cmd = cmd
  self.interfaceName = interfaceName
  self.interfaceMetric = interfaceMetric

LinkMonitorRequest.__init__ = LinkMonitorRequest__init__

all_structs.append(InterfaceDetails)
InterfaceDetails.thrift_spec = (
  None, # 0
  (1, TType.STRUCT, 'info', [openr.Lsdb.ttypes.InterfaceInfo, openr.Lsdb.ttypes.InterfaceInfo.thrift_spec, False], None, 2, ), # 1
  (2, TType.BOOL, 'isOverloaded', None, None, 2, ), # 2
  (3, TType.I32, 'metricOverride', None, None, 1, ), # 3
)

InterfaceDetails.thrift_struct_annotations = {
}
InterfaceDetails.thrift_field_annotations = {
}

def InterfaceDetails__init__(self, info=None, isOverloaded=None, metricOverride=None,):
  self.info = info
  self.isOverloaded = isOverloaded
  self.metricOverride = metricOverride

InterfaceDetails.__init__ = InterfaceDetails__init__

all_structs.append(DumpLinksReply)
DumpLinksReply.thrift_spec = (
  None, # 0
  (1, TType.STRING, 'thisNodeName', True, None, 2, ), # 1
  None, # 2
  (3, TType.BOOL, 'isOverloaded', None, None, 2, ), # 3
  None, # 4
  None, # 5
  (6, TType.MAP, 'interfaceDetails', (TType.STRING,True,TType.STRUCT,[InterfaceDetails, InterfaceDetails.thrift_spec, False]), None, 2, ), # 6
)

DumpLinksReply.thrift_struct_annotations = {
}
DumpLinksReply.thrift_field_annotations = {
}

def DumpLinksReply__init__(self, thisNodeName=None, isOverloaded=None, interfaceDetails=None,):
  self.thisNodeName = thisNodeName
  self.isOverloaded = isOverloaded
  self.interfaceDetails = interfaceDetails

DumpLinksReply.__init__ = DumpLinksReply__init__

all_structs.append(LinkMonitorConfig)
LinkMonitorConfig.thrift_spec = (
  None, # 0
  (1, TType.BOOL, 'isOverloaded', None, False, 2, ), # 1
  (2, TType.SET, 'overloadedLinks', (TType.STRING,True), None, 2, ), # 2
  (3, TType.MAP, 'linkMetricOverrides', (TType.STRING,True,TType.I32,None), None, 2, ), # 3
  (4, TType.I32, 'nodeLabel', None, 0, 2, ), # 4
)

LinkMonitorConfig.thrift_struct_annotations = {
}
LinkMonitorConfig.thrift_field_annotations = {
}

def LinkMonitorConfig__init__(self, isOverloaded=LinkMonitorConfig.thrift_spec[1][4], overloadedLinks=None, linkMetricOverrides=None, nodeLabel=LinkMonitorConfig.thrift_spec[4][4],):
  self.isOverloaded = isOverloaded
  self.overloadedLinks = overloadedLinks
  self.linkMetricOverrides = linkMetricOverrides
  self.nodeLabel = nodeLabel

LinkMonitorConfig.__init__ = LinkMonitorConfig__init__

fix_spec(all_structs)
del all_structs
